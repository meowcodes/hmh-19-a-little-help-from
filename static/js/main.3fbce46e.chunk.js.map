{"version":3,"sources":["Item.js","Category.js","AddEditForm.js","MasterList.js","MyListItem.js","MyListEdit.js","MyList.js","App.js","serviceWorker.js","index.js"],"names":["Item","react_default","a","createElement","className","this","props","text","onClick","notifyAdd","Component","Category","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","interested","toggleInterest","bind","assertThisInitialized","id","item","items","filter","curr","setState","_this2","title","map","src_Item_0","key","sendAddItem","AddEditForm","editedText","handleChange","handleSubmit","evt","preventDefault","target","value","notifyExit","onSubmit","name","onChange","MasterList","addEdit","currItem","showAddEdit","hideAddEdit","src_AddEditForm_0","categories","category","src_Category_0","MyListItem","edit","showEditForm","notifyEdit","notifyRemove","defaultProps","MyListEdit","list","src_MyListItem_0","MyList","App","currPage","myList","uuid","addToMyList","editMyList","removeFromMyList","newList","objectSpread","push","page","updatePage","src_MasterList_0","src_MyListEdit_0","src_MyList","pages","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3fbce46e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Item.css';\n\n/**\n * Recieves ONE Item with items from Category\n * Renders a list item with item text\n * If item add button is clicked, item id is sent up to MasterList\n */\n\nclass Item extends Component {\n\n    render() {\n        return (\n            <li className=\"Item\">\n                <p>{ this.props.text }</p>\n                <button onClick={ this.props.notifyAdd }>+</button>\n            </li>\n        );\n    }\n}\n\nexport default Item;\n","import React, { Component } from 'react';\nimport Item from \"./Item\"\nimport './Category.css';\n\n/**\n * Recieves ONE category with items from MasterList\n * Renders a div with category title and list of items\n * If item add button is clicked, item id is sent up to MasterList (then to AddEditForm)\n */\n\nclass Category extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            interested: true\n        }\n        this.toggleInterest = this.toggleInterest.bind(this);\n    }\n\n    sendAddItem(id){\n        let item = this.props.items.filter(item => item.id === id)[0];\n        this.props.notifyAdd(item);\n    }\n\n    toggleInterest() {\n        let curr = this.state.interested;\n        this.setState({\n            interested: !curr\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"Category\">\n                <div className=\"Category-title-box\">\n                    <h1 className=\"Category-title\">\n                        { this.props.title }\n                    </h1>\n                    <button className=\"Category-toggle-btn\" onClick={ this.toggleInterest }>\n                        { this.state.interested\n                            ? \"-\"\n                            : \"+\"}\n                    </button>\n                </div>\n                <div className={ this.state.interested\n                    ? \"Category-items\"\n                    : \"Category-items hidden\"}>\n                    <ul>\n                        { this.props.items.map( item => \n                            <Item \n                                key={ item.id }\n                                text={ item.text }\n                                notifyAdd={ () => this.sendAddItem(item.id) }\n                            />\n                        )}\n                    </ul>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Category;\n","import React, { Component } from 'react';\nimport './AddEditForm.css';\n\n/**\n * Recieves ONE item text and id from MasterList\n * Renders a form to edit text of item\n * On submit, the edited text is sent up to App and added to myList\n */\n\nclass AddEditForm extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            editedText: this.props.text\n        }\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleSubmit(evt) {\n        evt.preventDefault();\n        this.props.notifyAdd(this.state.editedText);\n    }\n\n    handleChange(evt) {\n        this.setState({\n            editedText: evt.target.value\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"AddEditForm\">\n                <div className=\"AddEditForm-box\">\n                    <button className=\"AddEditForm-exit-btn\" onClick={ this.props.notifyExit }>X</button>\n                    <div className=\"AddEditForm-form\">\n                        <form onSubmit={ this.handleSubmit }>\n                            <input \n                                name=\"editedText\" \n                                id=\"editedText\" \n                                value={ this.state.editedText }\n                                onChange={ this.handleChange }\n                                />\n                            <button>Add to My List</button>\n                        </form>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default AddEditForm;\n","import React, { Component } from 'react';\nimport Category from \"./Category\";\nimport AddEditForm from \"./AddEditForm\";\nimport './MasterList.css';\n\n/**\n * Recieves list of all categories and items\n * Renders categories as divs\n * Renders Add/Edit Form when user wants to add an item to My List\n * Sends id and edited text of added item to App\n */\n\nclass MasterList extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            addEdit: false,\n            currItem: {}\n        }\n        this.showAddEdit = this.showAddEdit.bind(this);\n        this.hideAddEdit = this.hideAddEdit.bind(this);\n    }\n\n    showAddEdit(item) {\n        // show add/edit box\n        this.setState({\n            addEdit: true,\n            currItem: item\n        });\n    }\n\n    hideAddEdit(editedText) {\n        // hide add/edit box\n        this.setState({\n            addEdit: false,\n            currItem: {}\n        });\n\n        // actually add to list\n        if(editedText){\n            this.props.notifyAdd(editedText);\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"MasterList\">\n                { this.state.addEdit && \n                    <AddEditForm\n                        text={ this.state.currItem.text }\n                        id={ this.state.currItem.id }\n                        notifyAdd={ this.hideAddEdit }\n                        notifyExit={ this.hideAddEdit }\n                    />\n                }\n                { this.props.categories.map( category =>\n                    <Category \n                        key={ category.title }\n                        title={ category.title }\n                        items={ category.items }\n                        notifyAdd={ this.showAddEdit }\n                    />\n                )}\n            </div>\n        );\n    }\n}\n\nexport default MasterList;\n","import React, { Component } from 'react';\nimport './MyListItem.css'\n/**\n * Receives ONE item from MyListEdit\n * Renders a text or an input item (if being edited)\n * Sends edited text to App\n */\n\nclass MyListItem extends Component {\n    static defaultProps = {\n        item: {text: \"go swimming\", id: 1}\n    }\n  \n    constructor(props) {\n        super(props);\n        this.state = {\n            edit: false,\n            editedText: \"\"\n        }\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.showEditForm = this.showEditForm.bind(this);\n    }\n\n    handleSubmit(evt) {\n        evt.preventDefault();\n        this.props.notifyEdit(this.props.item.id, this.state.editedText);\n        this.setState({\n            edit: false,\n            editedText: \"\"\n        });\n    }\n\n    handleChange(evt) {\n        this.setState({\n            editedText: evt.target.value\n        });\n    }\n\n    showEditForm() {\n        this.setState({\n            edit: true,\n            editedText: this.props.item.text\n        })\n    }\n\n    render() {\n        return (\n            <li className=\"MyListItem\">\n                { this.state.edit\n                    ? <div >\n                        <form className=\"MyListItem-text\" onSubmit={ this.handleSubmit }>\n                            <input \n                            name=\"editedText\" \n                            id=\"editedText\" \n                            value={ this.state.editedText }\n                            onChange={ this.handleChange }\n                            />\n                            <div>\n                                <button>Update</button>\n                            </div>\n                        </form>\n                    </div>\n                    : <div className=\"MyListItem-text\">\n                        <p>{ this.props.item.text }</p>\n                        <div>\n                            <button onClick={ this.showEditForm }>Edit</button>\n                            <button onClick={ () => this.props.notifyRemove(this.props.item.id) }>Remove</button>\n                        </div>\n                    </div>\n                }\n\n            </li>\n        );\n    }\n}\n\nexport default MyListItem;\n","import React, { Component } from 'react';\nimport MyListItem from './MyListItem';\nimport './MyListEdit.css';\n\n/**\n * Receives list from App\n * Renders My List Page with editing features\n * Sends edited text to App\n */\n\nclass MyListEdit extends Component {\n    static defaultProps = {\n        list: [ \n            {text: \"go swimming\", id: 1},\n            {text: \"go to the beach\", id: 2},\n            {text: \"hike mount diable\", id: 3},\n            {text: \"bike around marina\", id: 4}\n        ]\n    }\n  \n    constructor(props) {\n        super(props);\n        this.state = {}\n    }\n\n    render() {\n        return (\n            <div className=\"MyListEdit\">\n                <div className=\"MyListEdit-show\">\n                    <h3 className=\"MyListEdit-title\">My List</h3>\n                    <ul className=\"MyListEdit-list\">\n                        { this.props.list.map( item =>\n                            <MyListItem \n                                key={ item.id } \n                                item={ item } \n                                notifyEdit={ this.props.notifyEdit }\n                                notifyRemove={ this.props.notifyRemove }\n                            />\n                        )}\n                    </ul>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default MyListEdit;\n","import React, { Component } from 'react';\n// import './MyList.css';\n\n/**\n * Receives list from App\n * Renders My List Page\n * Allow editing and sharing with friends\n */\n\nclass MyList extends Component {\n    static defaultProps = {\n        list: [ \n            {text: \"go swimming\", id: 1},\n            {text: \"go to the beach\", id: 2},\n            {text: \"hike mount diable\", id: 3},\n            {text: \"bike around marina\", id: 4}\n        ]\n    }\n  \n    constructor(props) {\n        super(props);\n        this.state = {}\n    }\n\n    render() {\n        return (\n            <div className=\"MyList\">\n                <div className=\"MyList-show\">\n                    <div className=\"MyList-share\">\n                        <h3 className=\"MyList-title\">Share with Friends</h3>\n\n<p>This prototype provides an introduction we wrote plus your list: copy, paste, rewrite any way you like, and share with you who you like.</p>         \n                    </div>\n                    <hr/>          \n                    <p className=\"MyList-intro\">Hey friends — Sometimes I go through tough times, and could really use some help. I believe my friends want to be there, and maybe don't know what I need, so I've written down a few ways that friends could help — most of them mutual. I would really feel gratitude if you can commit to partnering with me on just one of these:</p>\n                    <ul className=\"MyList-list\">\n                        { this.props.list.map( item =>\n                            <li className=\"MyList-list-item\" key={ item.id }>{ item.text }</li>\n                        )}\n                    </ul>\n                    <p>I wrote this post with some tips from http://alittlehelpfrom.org</p>\n                    <p>Check it out and consider creating your own.</p> \n                </div>\n            </div>\n        );\n    }\n}\n\nexport default MyList;\n","import React, { Component } from 'react';\n// import Introduction from './Introduction';\nimport MasterList from './MasterList';\nimport MyListEdit from './MyListEdit';\nimport MyList from './MyList';\nimport uuid from 'uuid/v4';\nimport './App.css';\n\n/**\n * \n * Renders Intro Page, Master List Page, My List Page\n * \n */\n\nclass App extends Component {\n    static defaultProps = {\n        pages: [ \"intro\", \"masterList\", \"myListEdit\", \"myList\"]\n    }\n  \n    constructor(props) {\n        super(props);\n        this.state = {\n            currPage: \"masterList\",\n            myList: [],\n            categories: [\n                {\n                    title: \"Sports\",\n                    items: [\n                        { text: \"play baseball\", id: uuid() },\n                        { text: \"go swimming\", id: uuid() },\n                        { text: \"run in the park\", id: uuid() }\n                    ]\n                },\n                {\n                    title: \"Pets\",\n                    items: [\n                        { text: \"play with puppy\", id: uuid() },\n                        { text: \"groom cat\", id: uuid() }\n                    ]\n                }\n            ]\n        }\n        this.addToMyList = this.addToMyList.bind(this);\n        this.editMyList = this.editMyList.bind(this);\n        this.removeFromMyList = this.removeFromMyList.bind(this);\n    }\n\n    addToMyList(editedText) {\n        let newList = this.state.myList[0] ? this.state.myList.map(item => ({...item})) : [];\n        newList.push({ text: editedText, id: uuid()})\n        this.setState({\n            myList: newList\n        });\n    }\n\n    editMyList(id, editedText) {\n        let newList = this.state.myList.map(item => \n            (item.id === id \n                ? { id: item.id, text: editedText }\n                : {...item}\n            )\n        );\n        this.setState({\n            myList: newList\n        });\n    }\n\n    removeFromMyList(id) {\n        let newList = this.state.myList.filter(item => item.id !== id);\n        this.setState({\n            myList: newList\n        });\n    }\n\n    updatePage(page) {\n        this.setState({\n            currPage: page\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <div className=\"App-nav\">\n                    <button onClick={ () => this.updatePage(\"intro\") }>\n                        Introduction\n                    </button>\n                    <button onClick={ () => this.updatePage(\"masterList\") }>\n                        Activities\n                    </button>\n                    <button onClick={ () => this.updatePage(\"myListEdit\") }>\n                        Edit My List\n                    </button>\n                    <button onClick={ () => this.updatePage(\"myList\") }>\n                        Share My List\n                    </button>\n                </div>\n                {/* { this.state.currPage === \"intro\" &&\n                    <Introduction />\n                } */}\n                { this.state.currPage === \"masterList\" &&\n                    <MasterList \n                        categories={ this.state.categories }\n                        notifyAdd={ this.addToMyList }\n                    />\n                }\n                { this.state.currPage === \"myListEdit\" &&\n                    <MyListEdit \n                        list={ this.state.myList } \n                        notifyEdit={ this.editMyList }\n                        notifyRemove={ this.removeFromMyList }\n                    />\n                }\n                { this.state.currPage === \"myList\" &&\n                    <MyList list={ this.state.myList } />\n                }\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}